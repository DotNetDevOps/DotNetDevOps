{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location of the Cluster"
      }
    },
    "clusterName": {
      "type": "string",
      "defaultValue": "[toLower(take(resourceGroup().name,23))]",
      "metadata": {
        "description": "Name of your cluster - Between 3 and 23 characters. Letters and numbers only"
      }
    },
    "adminUserName": {
      "type": "string",
      "defaultValue": "adminuser",
      "metadata": {
        "description": "Remote desktop user Id"
      }
    },
    "durabilityLevel": {
      "type": "string",
      "defaultValue": "Bronze",
      "metadata": {
        "description": "The durability level"
      }
    },
    "reliabilityLevel": {
      "type": "string",
      "defaultValue": "Bronze",
      "metadata": {
        "description": "The reliability level"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Remote desktop user password. Must be a strong password"
      }
    },
    "vmImagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer",
      "metadata": {
        "description": "VM image Publisher"
      }
    },
    "vmImageOffer": {
      "type": "string",
      "defaultValue": "WindowsServerSemiAnnual",
      "metadata": {
        "description": "VM image offer"
      }
    },
    "vmImageSku": {
      "type": "string",
      "defaultValue": "Datacenter-Core-1803-with-Containers-smalldisk",
      "metadata": {
        "description": "VM image SKU"
      }
    },
    "vmSku": {
      "type": "string",
      "defaultValue": "Standard_E2S_v3",
      "metadata": {
        "description": "VM SKU"
      }
    },
    "vmImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "VM image version"
      }
    },
    "certificateStoreValue": {
      "type": "string",
      "allowedValues": [
        "My"
      ],
      "defaultValue": "My",
      "metadata": {
        "description": "The store name where the cert will be deployed in the virtual machine"
      }
    },
    "certificateThumbprint": {
      "type": "string",
      "metadata": {
        "description": "Certificate Thumbprint"
      }
    },
    "sourceVaultValue": {
      "type": "string",
      "metadata": {
        "description": "Resource Id of the key vault, is should be in the format of /subscriptions/<Sub ID>/resourceGroups/<Resource group name>/providers/Microsoft.KeyVault/vaults/<vault name>"
      }
    },
    "certificateUrlValue": {
      "type": "string",
      "metadata": {
        "description": "Refers to the location URL in your key vault where the certificate was uploaded, it is should be in the format of https://<name of the vault>.vault.azure.net:443/secrets/<exact location>"
      }
    },
    "clusterProtectionLevel": {
      "type": "string",
      "allowedValues": [
        "None",
        "Sign",
        "EncryptAndSign"
      ],
      "defaultValue": "EncryptAndSign",
      "metadata": {
        "description": "Protection level.Three values are allowed - EncryptAndSign, Sign, None. It is best to keep the default of EncryptAndSign, unless you have a need not to"
      }
    },
    "supportLogStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the support log storage account"
      }
    },
    "applicationDiagnosticsStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the application diagnostics storage account"
      }
    },
    "nt0InstanceCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Instance count for node type"
      }
    }
  },
  "variables": {
    "withDocker": false,
    "computeLocation": "[parameters('clusterLocation')]",
    "dnsName": "[toLower(take(resourceGroup().name,63))]",
    "vmName": "vm",
    "lbApiVersion": "2015-06-15",
    "vNetApiVersion": "2015-06-15",
    "storageApiVersion": "2016-01-01",
    "publicIPApiVersion": "2016-03-30",
    "applicationDiagnosticsStorageAccountName": "[toLower(concat(uniqueString(resourceGroup().id), '3' ))]",
    "supportLogStorageAccountName": "[toLower( concat( uniqueString(resourceGroup().id),'2'))]",
    "backendNatPort": 3389,

    "nt0applicationStartPort": "20000",
    "nt0applicationEndPort": "30000",
    "nt0ephemeralStartPort": "49152",
    "nt0ephemeralEndPort": "65534",
    "nt0fabricTcpGatewayPort": "19000",
    "nt0fabricHttpGatewayPort": "19080",

    "virtualNetworkName": "VNet",
    "addressPrefix": "10.0.0.0/16",
    "subnet0Name": "Subnet-0",
    "subnet0Prefix": "10.0.0.0/24",
    "lbIPName": "PublicIP-LB-FE",
    "vmNodeType0Name": "[toLower(concat('NT1', variables('vmName')))]",
    "lbID0": "[resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')))]",
    "lbPoolID0": "[concat(variables('lbID0'),'/backendAddressPools/LoadBalancerBEAddressPool')]",
    "lbIPConfig0": "[concat(variables('lbID0'),'/frontendIPConfigurations/LoadBalancerIPConfig-0')]",
    "lbProbeID0": "[concat(variables('lbID0'),'/probes/FabricGatewayProbe')]",
    "lbHttpProbeID0": "[concat(variables('lbID0'),'/probes/FabricHttpGatewayProbe')]"

  },
  "resources": [
    {
      "apiVersion": "2014-04-01",
      "name": "[parameters('clusterName')]",
      "type": "Microsoft.Insights/components",
      "location": "[parameters('clusterLocation')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.ServiceFabric/clusters/', parameters('clusterName'))]": "Resource",
        "displayName": "AppInsightsComponent"
      },
      "properties": {
        "applicationId": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('supportLogStorageAccountName')]",
      "location": "[variables('computeLocation')]",
      "dependsOn": [],
      "properties": {},
      "kind": "Storage",
      "sku": {
        "name": "[parameters('supportLogStorageAccountType')]"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('applicationDiagnosticsStorageAccountName')]",
      "location": "[variables('computeLocation')]",
      "dependsOn": [],
      "properties": {},
      "kind": "Storage",
      "sku": {
        "name": "[parameters('applicationDiagnosticsStorageAccountType')]"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('vNetApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('computeLocation')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet0Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet0Prefix')]"
            }
          }
        ]
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    //{
    //  "apiVersion": "[variables('publicIPApiVersion')]",
    //  "type": "Microsoft.Network/publicIPAddresses",
    //  "name": "[concat(variables('lbIPName'),'-','0')]",
    //  "location": "[variables('computeLocation')]",
    //  "properties": {
    //    "dnsSettings": {
    //      "domainNameLabel": "[variables('dnsName')]"
    //    },
    //    "publicIPAllocationMethod": "Dynamic"
    //  },
    //  "tags": {
    //    "resourceType": "Service Fabric",
    //    "clusterName": "[parameters('clusterName')]"
    //  }
    //},
    {
      "apiVersion": "[variables('lbApiVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'))]",
      "location": "[variables('computeLocation')]",
      "dependsOn": [
      //  "[concat('Microsoft.Network/publicIPAddresses/',concat(variables('lbIPName'),'-','0'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[concat('LoadBalancerIPConfig-','0')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('lbIPName'),'-','0'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBEAddressPool",
            "properties": {}
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[variables('nt0fabricTcpGatewayPort')]",
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": "[variables('nt0fabricTcpGatewayPort')]",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID0')]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "LBHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[variables('nt0fabricHttpGatewayPort')]",
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": "[variables('nt0fabricHttpGatewayPort')]",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbHttpProbeID0')]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "GatewayHttp",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": 8498,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": 80,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(variables('lbID0'),'/probes/AppPortProbe-0')]"
              },
              "protocol": "Tcp"
            }
          },
          {
            "name": "GatewayHttps",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": 8500,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(variables('lbID0'),'/probes/AppPortProbe-0')]"
              },
              "protocol": "Tcp"
            }
          }
        ],


        "probes": [
          {
            "name": "FabricGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[variables('nt0fabricTcpGatewayPort')]",
              "protocol": "Tcp"
            }
          },
          {
            "name": "FabricHttpGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[variables('nt0fabricHttpGatewayPort')]",
              "protocol": "Tcp"
            }
          },
          {
            "name": "AppPortProbe-0",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": 8498,
              "protocol": "Tcp"
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "LoadBalancerBEAddressNatPool",
            "properties": {
              "backendPort": "[variables('backendNatPort')]",
              "frontendIPConfiguration": {
                "id": "[variables('lbIPConfig0')]"
              },
              "frontendPortRangeEnd": 4500,
              "frontendPortRangeStart": 3389,
              "protocol": "Tcp"
            }
          }
        ]
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "name": "CreateVMSS",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-09-01",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('applicationDiagnosticsStorageAccountName'))]",
        "[concat('Microsoft.ServiceFabric/clusters/', parameters('clusterName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat('{{HOST}}/providers/DotNetDevOps.AzureTemplates/templates/vmss/scalesets/demo?withExtensions=true&withdocker=',variables('withDocker'),'&vmImagePublisher=',parameters('vmImagePublisher'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "clusterName": { "value": "[parameters('clusterName')]" },
          "clusterLocation": { "value": "[parameters('clusterLocation')]" },
          "durabilityLevel": { "value": "[parameters('durabilityLevel')]" },
          "adminUserName": { "value": "[parameters('adminUserName')]" },
          "reliabilityLevel": { "value": "[parameters('reliabilityLevel')]" },
          "certificateThumbprint": { "value": "[parameters('certificateThumbprint')]" },
          "certificateStoreValue": { "value": "[parameters('certificateStoreValue')]" },
          "adminPassword": { "value": "[parameters('adminPassword')]" },
          "certificateUrlValue": { "value": "[parameters('certificateUrlValue')]" },
          "vmImagePublisher": { "value": "[parameters('vmImagePublisher')]" },
          "vmImageOffer": { "value": "[parameters('vmImageOffer')]" },
          "vmImageSku": { "value": "[parameters('vmImageSku')]" },
          "vmSku": { "value": "[parameters('vmSku')]" },
          "vmImageVersion": { "value": "[parameters('vmImageVersion')]" },
          "nt0InstanceCount": { "value": "[parameters('nt0InstanceCount')]" },
          "sourceVaultValue": { "value": "[parameters('sourceVaultValue')]" },
          "applicationInsightsKey": { "value":  "[reference(concat('microsoft.insights/components/', parameters('clusterName'))).InstrumentationKey]" }
        }
      }
    },
    {
      "name": "AddMSIToKeyVault",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-09-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreateVMSS"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "{{HOST}}/providers/DotNetDevOps.AzureTemplates/templates/KeyVaults/accessPolicies/demo",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vault": {
            "value": "[reference(parameters('sourceVaultValue'),'2016-10-01','full')]"
          },
          "msi": {
            "value": "[reference('CreateVMSS').outputs.msi.value]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-07-01-preview",
      "type": "Microsoft.ServiceFabric/clusters",
      "name": "[parameters('clusterName')]",
      "location": "[parameters('clusterLocation')]",
      "dependsOn": [
      ],
      "properties": {
        "certificate": {
          "thumbprint": "[parameters('certificateThumbprint')]",
          "x509StoreName": "[parameters('certificateStoreValue')]"
        },
        "clientCertificateCommonNames": [],
        "clientCertificateThumbprints": [],
        "diagnosticsStorageAccountConfig": {
          "blobEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]",
          "protectedAccountKeyName": "StorageAccountKey1",
          "queueEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.queue]",
          "storageAccountName": "[variables('supportLogStorageAccountName')]",
          "tableEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.table]"
        },
        "fabricSettings": [
          //{
          //  "name": "Hosting",
          //  "parameters": [
          //    {
          //      "name": "ContainerServiceArguments",
          //      "value": "-H npipe://./pipe/docker_engine_sf"
          //    }
          //  ]
          //},
          //{
          //  "name": "Hosting",
          //  "parameters": [
          //    {
          //      "name": "SkipDockerProcessManagement",
          //      "value": "true"
          //    }
          //  ]
          //},
          {
            "parameters": [
              {
                "name": "ClusterProtectionLevel",
                "value": "[parameters('clusterProtectionLevel')]"
              }
            ],
            "name": "Security"
          },
          {
            "parameters": [
              {
                "name": "EnableDefaultServicesUpgrade",
                "value": true
              }
            ],
            "name": "ClusterManager"
          },
          {
            "name": "Diagnostics",
            "parameters": [
              {
                "name": "MaxDiskQuotaInMB",
                "value": 1024
              },
              {
                "name": "ApplicationLogsFormatVersion",
                "value": 1
              }


            ]
          },
          {
            "name": "EventStoreService",
            "parameters": [
              {
                "name": "TargetReplicaSetSize",
                "value": "3"
              },
              {
                "name": "MinReplicaSetSize",
                "value": "1"
              }
            ]
          }
        ],
        "addonFeatures": [
          "DnsService",
          "RepairManager"
        ],
        "managementEndpoint": "[concat('https://',reference(concat('Microsoft.Network/publicIPAddresses/',variables('lbIPName'),'-','0'),variables('publicIPApiVersion')).dnsSettings.fqdn,':',variables('nt0fabricHttpGatewayPort'))]",
        "nodeTypes": [
          {
            "name": "[variables('vmNodeType0Name')]",
            "applicationPorts": {
              "endPort": "[variables('nt0applicationEndPort')]",
              "startPort": "[variables('nt0applicationStartPort')]"
            },
            "clientConnectionEndpointPort": "[variables('nt0fabricTcpGatewayPort')]",
            "durabilityLevel": "[parameters('durabilityLevel')]",
            "ephemeralPorts": {
              "endPort": "[variables('nt0ephemeralEndPort')]",
              "startPort": "[variables('nt0ephemeralStartPort')]"
            },
            "httpGatewayEndpointPort": "[variables('nt0fabricHttpGatewayPort')]",
            "isPrimary": true,
            "vmInstanceCount": "[parameters('nt0InstanceCount')]"
          }
        ],
        "provisioningState": "Default",
        "reliabilityLevel": "[parameters('reliabilityLevel')]",
        "upgradeMode": "Automatic",
        "vmImage": "Windows"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    }


  ],
  "outputs": {
    "fqdn": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/',variables('lbIPName'),'-','0'),variables('publicIPApiVersion')).dnsSettings.fqdn]"
    },
    "applicationStorageName": {
      "type": "string",
      "value": "[variables('applicationDiagnosticsStorageAccountName')]"
    },
    "msi": {
      "type": "object",
      "value": "[reference('CreateVMSS').outputs.msi.value]"
    },
    "applicationInsightsKey": {
      "type": "string",
      "value": "[reference(concat('microsoft.insights/components/', parameters('clusterName'))).InstrumentationKey]"
    }
  }
}